## Analisis particionado de psychotria

#Nombre de los datos
filenames <- v("/home/dane/MEGAsync/bio_comparadaII/data/Psychotria/NEXUS/psychotria_its.nex", "/home/dane/MEGAsync/bio_comparadaII/data/Psychotria/NEXUS/psychotria_ets.nex")

# Numero de partiones
num_part <- filenames.size()

# cargando datos

for(i in 1:num_part){
	data[i] = readDiscreteCharacterData(filenames[i])
}

# variables de utilidad

# Nombre de los taxa
taxa <- data[1].taxa()

# Numero de taxa
ntax <- data[1].ntaxa()


mvi = 0
mni = 0

# ITS HKY

kappa ~ dnLnorm(2.8994, 1.4853)
moves[++mvi] = mvScale(kappa)

freq_prior_hky <- v(0.1924,0.2767,0.2462,0.2846)
pi_hky ~ dnDirichlet(freq_prior_hky)
moves[++mvi] = mvSimplexElementScale(pi_hky, weight=2)

Q[1] := fnHKY(kappa, pi_hky)

# GTR + G
change_prior_gtr <- v(0.5899,2.3436, 0.5197,0.4691,1.1553,1.0000)
er_gtr ~ dnDirichlet(change_prior_gtr)
moves[++mvi] = mvSimplexElementScale(er_gtr)


freq_prior_gtr <- v( 0.2532,0.2903,0.2470,0.2095)
pi_gtr ~ dnDirichlet(freq_prior_gtr)
moves[++mvi] = mvSimplexElementScale(pi_gtr, weight=2)

Q[2] := fnGTR(er_gtr, pi_gtr)

# Gamma
shape_prior <-  0.2140
prior_sd <-0.5
shape  ~ dnLognormal(shape_prior, prior_sd)

# inicio nodo deterministico
gamma_rates := fnDiscretizeGamma( shape, 1/shape, 4 )

# Escala del movimiento del parametro
moves[++mvi] = mvScale(shape, weight=2.0)

# Modelo del arbol

# Specify a prior on the diversification and turnover rate
diversification ~ dnUniform(0,10)
diversification.setValue(0.01)
turnover ~ dnUniform(0,10)
turnover.setValue(0.01)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
moves[++mvi] = mvSlide(diversification,delta=1,tune=true,weight=1)
extinction := turnover
moves[++mvi] = mvSlide(turnover,delta=1,tune=true,weight=1)

### process time ###
## Uniform prior on process time
root_time ~ dnUnif(28.3, 34.0)
moves[++mvi] = mvSlide(root_time,delta=1,tune=true,weight=1)
## The sampling-through-time parameter
fossil_rate ~ dnUniform(0,10)
moves[++mvi] = mvSlide(fossil_rate,delta=1,tune=true,weight=1)
## The probability of sampling at the present (rho)
sampling_prob <- ntax / 1850

## the Birth-death distribution ##
psi ~ dnFBDP(startAge=root_time, lambda=speciation, mu=extinction, psi=fossil_rate, rho=sampling_prob, condition="survival", taxa=taxa, startCondition="root")


# all moves are sliding proposals but you could use scaling proposals for the rates too

moves[++mvi] = mvNarrow(psi, weight=5.0)
moves[++mvi] = mvNNI(psi, weight=1.0)
moves[++mvi] = mvFNPR(psi, weight=3.0)
moves[++mvi] = mvSubtreeScale(psi, weight=3.0)
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=15.0)


## Reloj Global

log_global_clock_rate ~ dnUniform(-6,1)
moves[++mvi] = mvSlide(log_global_clock_rate, weight=2.0)
global_clock_rate := 10^log_global_clock_rate

## Reloj Molecular por particion

part_rate_mult ~ dnDirichlet( rep(1.0, num_part) )
moves[++mvi] = mvBetaSimplex(part_rate_mult, alpha=1.0, tune=true, weight=num_part)
moves[++mvi] = mvDirichletSimplex(part_rate_mult, alpha=1.0, tune=true, weight=2.0)

for (i in 1:num_part) {
	part_rate[i] := part_rate_mult[i] * num_part * global_clock_rate
}

## Todo junto

for (i in 1:num_part) {
	phyloSeq[i] ~ dnPhyloCTMC(tree=psi, Q=Q[i], branchRates=part_rate_mult[i], siteRates= gamma_rates, type="DNA")
	phyloSeq[i].clamp(data[i])
}

mymodel= model(phyloSeq)

## Monitores

monitors[++mni] = mnModel(filename="output_psy/Psychotria.log", printgen=400)
monitors[++mni] = mnFile(filename="output_psy/Psychotria.trees", printgen=400, separator = TAB, psi)
monitors[++mni] = mnScreen(printgen=400, global_clock_rate, root_time)


## MCMC
mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.run(generations=5000000)

treetrace = readTreeTrace("output_psy/Psychotria.trees", treetype="clock")

map_tree = mapTree(treetrace,"output_psy/Psychotria_MAP.tree")

# exit
quit()
